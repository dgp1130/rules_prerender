@import '../../theme.css';

:host {
    display: grid;
    grid-template:
        "header header header" auto
        "main main -" 1fr
        "footer footer footer" auto;
    grid-template-columns: var(--rp-layout--nav-width) 1fr 0fr;
    column-gap: 1rem;
    background-color: var(--light-gray);
    min-height: 100vh;
    overflow-y: auto;

    /* Constants representing the nav bar width when expanded/collapsed. */
    --rp-layout--expanded-nav-width: 300px;
    --rp-layout--collapsed-nav-width: 0px;
}

/* Default the nav pane to shown/hidden based on viewport width. */
@media (max-width: 1023px) {
    :host {
        --rp-layout--nav-width: var(--rp-layout--collapsed-nav-width);
    }
}
@media (min-width: 1024px) {
    :host {
        --rp-layout--nav-width: var(--rp-layout--expanded-nav-width);
    }
}

/* Always hide the nav pane when `nav="collapsed"` is set. */
:host([nav="collapsed"]) {
    --rp-layout--nav-width: var(--rp-layout--collapsed-nav-width);
}

/* Always show the nav pane when `nav="expanded"` is set. */
:host([nav="expanded"]) {
    --rp-layout--nav-width: var(--rp-layout--expanded-nav-width);
}

/* Enable animations when showing/hiding the nav pane. */
@media (prefers-reduced-motion: no-preference) {
    :host {
        --rp-layout--nav-transition-duration: 0.25s;

        transition: grid-template-columns var(--rp-layout--nav-transition-duration) ease-in-out;
    }

    rp-nav-pane {
        transition: transform var(--rp-layout--nav-transition-duration) ease-in-out;
    }
}

rp-header {
    grid-area: header;
}

dialog {
    grid-area: main;
    z-index: 1;
    position: relative;
    margin: 0;
    padding: 0;
    border: none;
    height: 100%;

    /* TODO: Hide when collapsed? */
    box-shadow: 2px 0 5px 0 gray;

    /*
     * The navigation is always forced a constant width, so as `rp-nav-pane` is
     * animated and shrunk the text does not overflow in response.
     */
    width: var(--rp-layout--expanded-nav-width);

    /* Translate the nav pane left when collapsed to slide it out of view. */
    transform: translateX(calc(
        var(--rp-layout--nav-width) - var(--rp-layout--expanded-nav-width)
    ));
}

rp-nav-pane {
    height: 100%;
}

main {
    grid-area: main;

    width: 100%;

    /*
     * IMPORTANT! The `main` content doesn't scroll independently, in fact it
     * should never have its own scrollbar. Yet, for some reason this one style
     * is critical to getting `<code>` tags to have their own horizontal scroll
     * bars. Exactly why is not clear.
     *
     * See: https://stackoverflow.com/a/77413468/3995712
     */
    overflow-y: auto;
}

footer {
    grid-area: footer;
}
