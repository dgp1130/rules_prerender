#!/bin/bash
# Copyright 2016 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
################################################################################
#

# Immediately exit if any command fails.
set -e

# --- begin runfiles.bash initialization ---
# Source the runfiles library:
# https://github.com/bazelbuild/bazel/blob/master/tools/bash/runfiles/runfiles.bash
# The runfiles library defines rlocation, which is a platform independent function
# used to lookup the runfiles locations. This code snippet is needed at the top
# of scripts that use rlocation to lookup the location of runfiles.bash and source it
if [[ ! -d "${RUNFILES_DIR:-/dev/null}" && ! -f "${RUNFILES_MANIFEST_FILE:-/dev/null}" ]]; then
    if [[ -f "$0.runfiles_manifest" ]]; then
      export RUNFILES_MANIFEST_FILE="$0.runfiles_manifest"
    elif [[ -f "$0.runfiles/MANIFEST" ]]; then
      export RUNFILES_MANIFEST_FILE="$0.runfiles/MANIFEST"
    elif [[ -f "$0.runfiles/bazel_tools/tools/bash/runfiles/runfiles.bash" ]]; then
      export RUNFILES_DIR="$0.runfiles"
    fi
fi
if [[ -f "${RUNFILES_DIR:-/dev/null}/bazel_tools/tools/bash/runfiles/runfiles.bash" ]]; then
  source "${RUNFILES_DIR}/bazel_tools/tools/bash/runfiles/runfiles.bash"
elif [[ -f "${RUNFILES_MANIFEST_FILE:-/dev/null}" ]]; then
  source "$(grep -m1 "^bazel_tools/tools/bash/runfiles/runfiles.bash " \
            "$RUNFILES_MANIFEST_FILE" | cut -d ' ' -f 2-)"
else
  echo >&2 "ERROR: cannot find @bazel_tools//tools/bash/runfiles:runfiles.bash"
  exit 1
fi
# --- end runfiles.bash initialization ---

if [[ -z "$TEST_SRCDIR" ]]; then
  case "$0" in
    /*) self="$0" ;;
    *)  self="$PWD/$0" ;;
  esac

  if [[ -e "$self.runfiles" ]]; then
    export TEST_SRCDIR="$self.runfiles"
  else
    echo "Unable to determine runfiles location"
    exit -1
  fi
fi

if [[ -z "$TEST_TEMPDIR" ]]; then
  export TEST_TEMPDIR=$(mktemp -d test_tempdir.XXXXXX)
fi

%TEMPLATED_env_vars%

printenv

# Split arguments into wtl_launcher_args and wtl_test_args. These variables are
# prefixed "wtl_" to reduce the chance of colliding with environment variables
# that the user intends to pass through to the wrapped test. (It's uncommon to
# name environment variables with lowercase letters, and yet, we had a bug
# report where this collision occurred.)
wtl_test_args=()
wtl_launcher_args=()
wtl_arg_at_next=0

for arg in "$@"; do
  if (( "$wtl_arg_at_next" )); then
    wtl_launcher_args+=("$arg")
    wtl_arg_at_next=0
  elif [[ "$arg" == --wtl_arg=* ]]; then
    wtl_launcher_args+=("${arg#--wtl_arg=}")
  elif [[ "$arg" == "--wtl_arg" ]];  then
    wtl_arg_at_next=1
  else
    wtl_test_args+=("$arg")
  fi
done

"$(rlocation %TEMPLATED_launcher%)" \
  --metadata="$(rlocation %TEMPLATED_metadata%)" \
  --test="$(rlocation %TEMPLATED_test%)" \
  "${wtl_launcher_args[@]}" \
  -- "${wtl_test_args[@]}"
