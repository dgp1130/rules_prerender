# Common Bazel settings for JavaScript/NodeJS workspaces
# This rc file is automatically discovered when Bazel is run in this workspace,
# see https://docs.bazel.build/versions/master/guide.html#bazelrc
#
# The full list of Bazel options: https://docs.bazel.build/versions/master/command-line-reference.html

# Cache action outputs on disk so they persist across output_base and bazel shutdown (eg. changing branches)
build --disk_cache=~/.cache/bazel-disk-cache

# Bazel will create symlinks from the workspace directory to output artifacts.
# Build results will be placed in a directory called "dist/bin"
# Other directories will be created like "dist/testlogs"
# Be aware that this will still create a bazel-out symlink in
# your project directory, which you must exclude from version control and your
# editor's search path.
build --symlink_prefix=dist/
# To disable the symlinks altogether (including bazel-out) you can use
# build --symlink_prefix=/
# however this makes it harder to find outputs.

# Specifies desired output mode for running tests.
# Valid values are
#   'summary' to output only test status summary
#   'errors' to also print test logs for failed tests
#   'all' to print logs for all tests
#   'streamed' to output logs for all tests in real time
#     (this will force tests to be executed locally one at a time regardless of --test_strategy value).
test --test_output=errors

# Support for debugging NodeJS tests
# Add the Bazel option `--config=debug` to enable this
# --test_output=streamed
#     Stream stdout/stderr output from each test in real-time.
#     See https://docs.bazel.build/versions/master/user-manual.html#flag--test_output for more details.
# --test_strategy=exclusive
#     Run one test at a time.
# --test_timeout=9999
#     Prevent long running tests from timing out
#     See https://docs.bazel.build/versions/master/user-manual.html#flag--test_timeout for more details.
# --nocache_test_results
#     Always run tests
# --node_options=--inspect-brk
#     Pass the --inspect-brk option to all tests which enables the node inspector agent.
#     See https://nodejs.org/de/docs/guides/debugging-getting-started/#command-line-options for more details.
# --compilation_mode=dbg
#     Rules may change their build outputs if the compilation mode is set to dbg. For example,
#     mininfiers such as terser may make their output more human readable when this is set. Rules will pass `COMPILATION_MODE`
#     to `nodejs_binary` executables via the actions.run env attribute.
#     See https://docs.bazel.build/versions/master/user-manual.html#flag--compilation_mode for more details.
# --test_env=DISPLAY
#     Passes the $DISPLAY environment variable from the host. This allows graphical tools like Chrome to connect to the host
#     Xserver and show a GUI to the user. This is particularly useful for debugging Puppeteer tests. Make sure $DISPLAY is set
#     to a usable value (consider testing with `xclock` if this doesn't work).
# --test_env=LIBGL_ALWAYS_INDIRECT=1
#     Sets the environment variable $LIBGL_ALWAYS_INDIRECT=1 to the test. This is necessary to be compatible with a Windows
#     Xserver when running in WSL2.
test:debug --test_output=streamed --test_strategy=exclusive --test_timeout=9999 --nocache_test_results --test_arg=--node_options=--inspect-brk --test_env=DISPLAY --test_env=LIBGL_ALWAYS_INDIRECT=1
# Use bazel run with `--config=debug` to turn on the NodeJS inspector agent.
# The node process will break before user code starts and wait for the debugger to connect.
run:debug -- --node_options=--inspect-brk
# The following option will change the build output of certain rules such as terser and may not be desirable in all cases
build:debug --compilation_mode=dbg

# --define=VERBOSE_LOGS=1
#     Rules will output verbose logs if the VERBOSE_LOGS environment variable is set. `VERBOSE_LOGS` will be passed to
#     `nodejs_binary` and `nodejs_test` via the default value of the `default_env_vars` attribute of those rules.
test:debug-resolve --define=VERBOSE_LOGS=1
run:debug-resolve --define=VERBOSE_LOGS=1

# Configuration for release builds. This should optimize its builds and stamp
# them with the version number for the NPM package defined as
# $BAZEL_RULES_PRERENDER_VERSION. This environment variable *must* be specified.
build:release -c opt --stamp --workspace_status_command "tools/bazel_stamp_vars.sh \"${BAZEL_RULES_PRERENDER_VERSION}\""

# Turn off legacy external runfiles
# This prevents accidentally depending on this feature, which Bazel will remove.
build --nolegacy_external_runfiles

# Turn on --incompatible_strict_action_env which was on by default
# in Bazel 0.21.0 but turned off again in 0.22.0. Follow
# https://github.com/bazelbuild/bazel/issues/7026 for more details.
# This flag is needed to so that the bazel cache is not invalidated
# when running bazel via `yarn bazel`.
# See https://github.com/angular/angular/issues/27514.
build --incompatible_strict_action_env
run --incompatible_strict_action_env

# Enable `_validation` actions to confirm targets build correctly even when
# certain data is not used by the build.
build --experimental_run_validations
run --experimental_run_validations
test --experimental_run_validations

# When running `bazel coverage` --instrument_test_targets needs to be set in order to 
# collect coverage information from test targets
coverage --instrument_test_targets

# Set all currently passing "incompatible" flags, to prevent regressions when
# upgrading to the next Bazel version which may require them.
build --incompatible_always_check_depset_elements
build --incompatible_avoid_conflict_dlls
build --incompatible_config_setting_private_default_visibility
build --incompatible_default_to_explicit_init_py
build --incompatible_depset_for_libraries_to_link_getter
build --incompatible_disable_depset_items
build --incompatible_disable_expand_if_all_available_in_flag_set
build --incompatible_disable_native_android_rules
build --incompatible_disable_third_party_license_checking
build --incompatible_disallow_empty_glob
build --incompatible_disallow_legacy_javainfo
build --incompatible_disallow_legacy_py_provider
build --incompatible_do_not_split_linking_cmdline
build --incompatible_dont_enable_host_nonhost_crosstool_features
build --incompatible_enable_android_toolchain_resolution
build --incompatible_enforce_config_setting_visibility
build --incompatible_exclusive_test_sandboxed
build --incompatible_force_strict_header_check_from_starlark
build --incompatible_java_common_parameters
build --incompatible_legacy_local_fallback
build --incompatible_linkopts_to_linklibs
build --incompatible_make_thinlto_command_lines_standalone
build --incompatible_merge_genfiles_directory
build --incompatible_new_actions_api
build --incompatible_no_attr_license
build --incompatible_no_implicit_file_export
build --incompatible_objc_compile_info_migration
build --incompatible_objc_provider_remove_compile_info
build --incompatible_prohibit_aapt1
build --incompatible_py2_outputs_are_suffixed
build --incompatible_py3_is_default
build --incompatible_remote_output_paths_relative_to_input_root
build --incompatible_remote_results_ignore_disk
build --incompatible_remote_symlinks
build --incompatible_remove_cpu_and_compiler_attributes_from_cc_toolchain
build --incompatible_remove_legacy_whole_archive
build --incompatible_require_ctx_in_configure_features
build --incompatible_require_linker_input_cc_api
build --incompatible_restrict_string_escapes
build --incompatible_run_shell_command_string
build --incompatible_strict_action_env
build --incompatible_struct_has_no_methods
build --incompatible_top_level_aspects_require_providers
build --incompatible_use_cc_configure_from_rules_cc
build --incompatible_use_platforms_repo_for_constraints
build --incompatible_use_python_toolchains
build --incompatible_validate_top_level_header_inclusions
build --incompatible_visibility_private_attributes_at_definition

# Load any settings specific to the current user.
# .bazelrc.user should appear in .gitignore so that settings are not shared with team members
# This needs to be last statement in this
# config, as the user configuration should be able to overwrite flags from this file.
# See https://docs.bazel.build/versions/master/best-practices.html#bazelrc
# (Note that we use .bazelrc.user so the file appears next to .bazelrc in directory listing,
# rather than user.bazelrc as suggested in the Bazel docs)
try-import %workspace%/.bazelrc.user
