load("@build_bazel_rules_nodejs//:index.bzl", "nodejs_binary")
load("@npm//@bazel/typescript:index.bzl", "ts_library")
load("//tools:jasmine.bzl", "jasmine_node_test")

nodejs_binary(
    name = "resource_injector",
    entry_point = "resource_injector.ts",
    visibility = ["//tools/internal:__pkg__"],
    templated_args = ["--bazel_patch_module_resolver"],
    data = [
        ":resource_injector_lib",
        "@npm//yargs",
    ],
)

ts_library(
    name = "resource_injector_lib",
    srcs = ["resource_injector.ts"],
    deps = [
        ":config",
        ":injector",
        "//common:binary",
        "//common:formatters",
        "@npm//@types/node",
        "@npm//@types/yargs",
    ],
)

ts_library(
    name = "resource_injector_test_lib",
    srcs = ["resource_injector_test.ts"],
    testonly = True,
    deps = [
        ":config",
        "//common:runfiles",
        "//common/testing:binary",
        "//common/testing:temp_dir",
        "@npm//@types/jasmine",
        "@npm//@types/node",
    ],
)

jasmine_node_test(
    name = "resource_injector_test",
    data = [":resource_injector"],
    deps = [":resource_injector_test_lib"],
)

ts_library(
    name = "config",
    srcs = ["config.ts"],
)

ts_library(
    name = "injector",
    srcs = ["injector.ts"],
    deps = [
        ":config",
        "//common:fs",
        "@npm//node-html-parser",
    ],
)

ts_library(
    name = "injector_test_lib",
    srcs = ["injector_test.ts"],
    testonly = True,
    deps = [
        ":config",
        ":injector",
        "//common:fs",
        "@npm//@types/jasmine",
    ],
)

jasmine_node_test(
    name = "injector_test",
    deps = [":injector_test_lib"],
)
