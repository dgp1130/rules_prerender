# yaml-language-server: $schema=http://json.schemastore.org/eslintrc

env:
  es2021: true
  browser: true
  node: true
  jasmine: true

extends:
- 'eslint:recommended'

ignorePatterns:
- bazel-out/
- dist/
- external/

parser: '@typescript-eslint/parser'
parserOptions:
  ecmaVersion: 12
  sourceType: module
  project: true

plugins:
- '@typescript-eslint'

rules:
  indent:
  - error
  - 4
  - SwitchCase: 1
  linebreak-style:
  - error
  - unix
  quotes:
  - error
  - single
  - allowTemplateLiterals: true
  semi:
  - error
  - always
  no-constant-condition:
  - error
  - checkLoops: false # `while (true) { /* ... */ }` is ok.
  no-unused-vars:
  - error
  - argsIgnorePattern: "^_"
    destructuredArrayIgnorePattern: "^_"
    # Deliberately _not_ setting `varsIgnorePattern`, since that benefits from
    # an explicit ignore comment instead of a load-bearing `_`.

# Enable TypeScript rules only for `*.[cm]?ts` files.
overrides:
- files:
  - "**/*.ts"
  - "**/*.d.ts"
  - "**/*.mts"
  - "**/*.d.mts"
  - "**/*.cts"
  - "**/*.d.cts"
  - "**/*.tsx"

  extends:
  - 'plugin:@typescript-eslint/strict-type-checked'
  - 'plugin:@typescript-eslint/stylistic-type-checked'

  rules:
    # TypeScript already disallows duplicated class members and sometimes allows
    # it (ex. method overrides).
    no-dupe-class-members:
      - off

    # TypeScript already disallows undeclared variables.
    no-undef:
      - off

    # Use `T[]` for simple types, `Array<T>` for complicated ones because in
    # `(Long & Complicated | Expression)[]` it's really easy to miss the `[]`.
    '@typescript-eslint/array-type':
      - error
      - default: 'array-simple'

    # Restricts `${expr}` to make sure `expr` prints something meaningful (ex.
    # not '[object Object]').
    '@typescript-eslint/restrict-template-expressions':
      - error
      -
        # Primitive values print as expected, so they are allowed.
        allowBoolean: true
        allowNumber: true

        # The point of `any` is to not deal with this.
        allowAny: true

        # `never` only happens for debug purposes.
        allowNever: true

    '@typescript-eslint/no-unnecessary-condition':
      - error
      - allowConstantLoopConditions: true # `while (true) {}` is ok.

    '@typescript-eslint/no-floating-promises':
      - error
      -
        # `async` IIFE exists *only* to create a floating promise.
        ignoreIIFE: true

    '@typescript-eslint/no-non-null-assertion':
      - error

    '@typescript-eslint/no-empty-function':
      - error

    '@typescript-eslint/no-inferrable-types':
      - error

    '@typescript-eslint/no-namespace':
      - error
      # Allow in `declare module` or `declare global` which is occasionally
      # useful for declaration merging (ex. `JSX.IntrinsicElements`).
      - allowDeclarations: true

    '@typescript-eslint/no-explicit-any':
      - off

    # `noImplicitAny` is good enough, we don't need more safety here. They
    # basically break `any` types to be effectively unusable and we can't
    # entirely avoid them due to library and platform types.
    '@typescript-eslint/no-unsafe-argument':
      - off
    '@typescript-eslint/no-unsafe-assignment':
      - off
    '@typescript-eslint/no-unsafe-call':
      - off
    '@typescript-eslint/no-unsafe-member-access':
      - off
    '@typescript-eslint/no-unsafe-return':
      - off

    # `async` functions are often required to match return function signatures,
    # even if they don't actually do `async` work. I'm not too worried about
    # accidentally leaving an `async` function which could have been synchronous
    # and having that lead to serious negative effects.
    '@typescript-eslint/require-await':
      - off

    '@typescript-eslint/no-unused-vars':
    - error
    - argsIgnorePattern: "^_"
      destructuredArrayIgnorePattern: "^_"
      # Deliberately _not_ setting `varsIgnorePattern`, since that benefits from
      # an explicit ignore comment instead of a load-bearing `_`.

- files:
  - "**/*_test.ts"
  - "**/test.ts"
  - "**/*_test.mts"
  - "**/test.mts"
  - "**/*_test.cts"
  - "**/test.cts"
  - "**/*_test.tsx"
  - "**/test.tsx"
  - "**/*_test_cases.ts"
  - "**/test_cases.ts"
  - "**/*_test_cases.mts"
  - "**/test_cases.mts"
  - "**/*_test_cases.cts"
  - "**/test_cases.cts"
  - "**/*_test_cases.tsx"
  - "**/test_cases.tsx"
  rules:
    # Disable non-null assertions in test files.
    '@typescript-eslint/no-non-null-assertion':
    - off

# Turn off rules dependent on `strictNullChecks` for examples with that option
# disabled.
- files:
  - examples/tsconfig/**
  rules:
    '@typescript-eslint/no-unnecessary-condition':
      - off

    '@typescript-eslint/prefer-nullish-coalescing':
      - off
