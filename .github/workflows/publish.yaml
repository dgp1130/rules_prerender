# This workflow will do a clean install of Node dependencies, executes all tests
# and then publishes the package to NPM with the given semver. Should be
# executed manually via the GitHub actions UI.

name: Publish

on:
  workflow_dispatch:
    inputs:
      version:
        description: NPM semver to release as.
        required: true
        default: "0.0.0-PLACEHOLDER"
      prerelease:
        description: |
          Whether or not to mark the GitHub release as a prerelease. Possible
          values: "true", "false".
        required: false
        default: "false"

jobs:
  publish:
    # Includes `bazelisk`.
    # https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md#:~:text=Bazel%204.2.1-,Bazelisk,-1.10.1
    runs-on: ubuntu-20.04

    steps:

    # Checkout the repository.
    - uses: actions/checkout@v3

    - name: Cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.gh-actions-cache/bazel/
          node_modules/
        key: bazel

    # Install the package, including Bazel.
    - name: Install
      run: bazel run @pnpm//:pnpm -- install --dir $PWD --frozen-lockfile

    # Build and test the entire repository.
    - name: Test
      run: bazel test //... --config ci

    # Publish the package. Use the CI configuration to reuse the existing cache
    # and have a more polished output.
    - name: Publish
      run: |
        # Append NPM token to `.npmrc` file.
        echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_ACCESS_TOKEN }}" >> .npmrc

        # Build all the packages to make sure they are buildable and the labels haven't
        # changed. This helps prevent publishing one package and then failing to build
        # the next one.
        bazel build --config ci --config release \
          //:rules_prerender_pkg_publish \
          //packages/declarative_shadow_dom:pkg_publish \
          //packages/preact:pkg_publish

        # Tar the NPM packages prior to publish to make sure the file paths are correct.
        tar -czf rules_prerender-${{ github.event.inputs.version }}.tar.gz \
            dist/bin/rules_prerender_pkg/
        tar -czf rules_prerender-declarative_shadow_dom-${{ github.event.inputs.version }}.tar.gz \
            dist/bin/packages/declarative_shadow_dom/pkg/
        tar -czf rules_prerender-preact-${{ github.event.inputs.version }}.tar.gz \
            dist/bin/packages/preact/pkg/

        # Publish the packages.
        bazel run --config ci --config release //:rules_prerender_pkg_publish
        bazel run --config ci --config release //packages/declarative_shadow_dom:pkg_publish
        bazel run --config ci --config release //packages/preact:pkg_publish

        # Remove the token from the `.npmrc` file, it should no longer be needed.
        sed -i "/${{ secrets.NPM_ACCESS_TOKEN }}/d" .npmrc
      env:
        BAZEL_RULES_PRERENDER_VERSION: ${{ github.event.inputs.version }}

    # Tag the commit and create a release on GitHub.
    - name: Tag and Create Draft Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: releases/${{ github.event.inputs.version }}
        release_name: ${{ github.event.inputs.version }}
        prerelease: ${{ github.event.inputs.prerelease == 'true' }}
        draft: true

    # Upload `rules_prerender` to the GitHub release.
    - name: Upload `rules_prerender` to GitHub
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: rules_prerender-${{ github.event.inputs.version }}.tar.gz
        asset_name: rules_prerender-${{ github.event.inputs.version }}.tar.gz
        asset_content_type: application/gzip

    # Upload `@rules_prerender/declarative_shadow_dom` to the GitHub release.
    - name: Upload `@rules_prerender/declarative_shadow_dom` to GitHub
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: rules_prerender-declarative_shadow_dom-${{ github.event.inputs.version }}.tar.gz
        asset_name: rules_prerender-declarative_shadow_dom-${{ github.event.inputs.version }}.tar.gz
        asset_content_type: application/gzip

    # Upload `@rules_prerender/preact` to the GitHub release.
    - name: Upload `@rules_prerender/preact` to GitHub
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: rules_prerender-preact-${{ github.event.inputs.version }}.tar.gz
        asset_name: rules_prerender-preact-${{ github.event.inputs.version }}.tar.gz
        asset_content_type: application/gzip

    # Notify the user that the release is completed.
    - name: Complete
      run: |
        echo "Draft release created at ${RELEASE_URL}."
        echo "Please update the changelog and publish the release."
      env:
        RELEASE_URL: https://github.com/dgp1130/rules_prerender/releases/tag/releases%2F${{ github.event.inputs.version }}
