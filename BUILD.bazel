load("//packages/rules_prerender:prerender_component_publish_files.bzl", "transitive_js_sources")
load("@aspect_rules_js//npm:defs.bzl", "npm_link_package", "npm_package")
load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("@bazel_skylib//lib:dicts.bzl", "dicts")
load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("@build_bazel_rules_nodejs//:index.bzl", "pkg_npm")
load("@npm//@bazel/typescript:index.bzl", "ts_config")
load("@npm_rules_js//:defs.bzl", "npm_link_all_packages")
load("//tools:publish.bzl", "publish_files")
load("//:index.bzl", "prerender_component", "prerender_component_publish_files")

exports_files(["tsconfig.json"], visibility = ["//visibility:public"])

ts_config(
    name = "tsconfig_client",
    src = "tsconfig.client.json",
    visibility = ["//visibility:public"],
    deps = ["tsconfig.json"],
)

npm_link_all_packages(name = "node_modules")

npm_link_package(
    name = "node_modules/test_pkg",
    src = "//packages/test_pkg",
    visibility = ["//visibility:public"],
)

transitive_js_sources(
    name = "rules_prerender_sources",
    target = "//packages/rules_prerender:rules_prerender_lib",
)

npm_package(
    name = "rules_prerender_pkg",
    srcs = [
        ":rules_prerender_sources",
        "package.json",
    ],
    package = "rules_prerender",
)

npm_link_package(
    name = "node_modules/rules_prerender",
    src = ":rules_prerender_pkg",
    visibility = ["//visibility:public"],
)

bzl_library(
    name = "rules_prerender",
    srcs = [
        "index.bzl",
        "package.bzl",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//packages/rules_prerender:extract_single_resource",
        "//packages/rules_prerender:inject_resources",
        "//packages/rules_prerender:prerender_component",
        "//packages/rules_prerender:prerender_component_publish_files",
        "//packages/rules_prerender:prerender_pages",
        "//packages/rules_prerender:prerender_pages_unbundled",
        "//packages/rules_prerender:prerender_resources",
        "//packages/rules_prerender:web_resources",
        "//packages/rules_prerender:web_resources_devserver",
        "//packages/rules_prerender/css:css_group",
        "//packages/rules_prerender/css:css_library",
    ],
)

# Re-export the `declarative_shadow_dom` component at the root of the package
# for easy import by consumers. This isn't needed for content in `//examples/...`
# as they should directly depend on `//packages/rules_prerender/declarative_shadow_dom`.
# However this is needed in the published version so external workspaces can import
# from `rules_prerender/declarative_shadow_dom`.
prerender_component(
    name = "declarative_shadow_dom",
    srcs = ["declarative_shadow_dom.ts"],
    tsconfig = "//:tsconfig.json",
    source_map = True,
    package_name = "rules_prerender",
    visibility = ["//visibility:public"],
    deps = ["//packages/rules_prerender/declarative_shadow_dom"],
)

prerender_component_publish_files(
    name = "declarative_shadow_dom_publish_files",
    dep = ":declarative_shadow_dom",
)

publish_files(
    name = "publish_files",
    files = [
        ".npmrc",
        "README.md",
        "index.bzl",
        "package.bzl",
        "package.json",
        ":declarative_shadow_dom_publish_files",
    ],
)

SUBSTITUTIONS = {
    # Remap packages with a `BUILD.publish` file to use
    # `@npm//rules_prerender/...` so they can be resolved at runtime.
    "//common": "@npm//rules_prerender/common",
    "//packages/renderer": "@npm//rules_prerender/packages/renderer",
    "//packages/rules_prerender": "@npm//rules_prerender/packages/rules_prerender",
    "//tools/internal": "@npm//rules_prerender/tools/internal",
}

pkg_npm(
    name = "pkg",
    package_name = "rules_prerender",
    substitutions = select({
        ":stamp": dicts.add(SUBSTITUTIONS, {
            "0.0.0-PLACEHOLDER": "{STABLE_RULES_PRERENDER_VERSION}",
        }),
        "//conditions:default": dicts.add(SUBSTITUTIONS, {
            "0.0.0-PLACEHOLDER": "0.0.0-unstamped",
        }),
    }),
    deps = [
        # Merge all tools and files to publish all together into the directory.
        ":publish_files",
        "//common:publish_files",
        "//packages/renderer:publish_files",
        "//packages/rules_prerender",
        "//packages/rules_prerender:publish_files",
        "//tools/internal:annotation_extractor",
        "//tools/internal:renderer",
        "//tools/internal:resource_injector",
        "//tools/internal:resource_packager",
        "//tools/internal:script_entry_generator",
        "//tools/internal:publish_files",
    ],
)

build_test(
    name = "pkg_test",
    targets = [":pkg"],
)

config_setting(
    name = "stamp",
    values = {
        "stamp": "1",
    },
)
