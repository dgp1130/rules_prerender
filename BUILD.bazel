load("@aspect_rules_js//npm:defs.bzl", "npm_link_package", "npm_package")
load("@aspect_rules_ts//ts:defs.bzl", "ts_config")
load("@bazel_skylib//:bzl_library.bzl", "bzl_library")
load("@bazel_skylib//lib:dicts.bzl", "dicts")
load("@bazel_skylib//rules:build_test.bzl", "build_test")
load("@npm_rules_js//:defs.bzl", "npm_link_all_packages")
load("//tools/publish:npm_publish.bzl", "npm_publish")
load("//tools/stamping:stamp_package.bzl", "stamp_package")
load("//tools:typescript.bzl", "types_only")
load("//:index.bzl", "link_prerender_component", "prerender_component", "prerender_component_publish_files")

exports_files([".npmrc"], visibility = ["//visibility:public"])

ts_config(
    name = "tsconfig",
    src = "tsconfig.json",
    visibility = ["//visibility:public"],
)

ts_config(
    name = "tsconfig_client",
    src = "tsconfig.client.json",
    visibility = ["//visibility:public"],
    deps = [":tsconfig"],
)

npm_link_all_packages(name = "node_modules")

# Makes an internal NPM package for `rules_prerender` and links it.
stamp_package(name = "package")
npm_package(
    name = "rules_prerender_pkg",
    srcs = [
        ":package",
        "//packages/rules_prerender:rules_prerender_lib",
    ],
    package = "rules_prerender",
    visibility = ["//visibility:public"],

    # TODO(#59): Remove when upstream is fixed.
    # See: https://github.com/dgp1130/rules_prerender/issues/48#issuecomment-1425257276
    include_external_repositories = ["rules_prerender"],
)
npm_publish(
    name = "rules_prerender_pkg_publish",
    package = ":rules_prerender_pkg",
    npmrc = ".npmrc",
)
npm_link_package(
    name = "node_modules/rules_prerender",
    src = ":rules_prerender_pkg",
    visibility = ["//visibility:public"],
)
types_only(
    name = "node_modules_types/rules_prerender",
    dep = "//:node_modules/rules_prerender",
    visibility = ["//visibility:public"],
)

npm_link_package(
    name = "node_modules/@rules_prerender/declarative_shadow_dom",
    src = "//packages/rules_prerender/declarative_shadow_dom:pkg",
    visibility = ["//visibility:public"],
)
link_prerender_component(
    name = "prerender_components/@rules_prerender/declarative_shadow_dom",
    package = ":node_modules/@rules_prerender/declarative_shadow_dom",
    visibility = ["//visibility:public"],
)

bzl_library(
    name = "rules_prerender",
    srcs = [
        "dependencies.bzl",
        "index.bzl",
        "npm_repositories.bzl",
        "repositories.bzl",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//packages/rules_prerender:extract_single_resource",
        "//packages/rules_prerender:inject_resources",
        "//packages/rules_prerender:prerender_component",
        "//packages/rules_prerender:prerender_component_publish_files",
        "//packages/rules_prerender:prerender_pages",
        "//packages/rules_prerender:prerender_pages_unbundled",
        "//packages/rules_prerender:prerender_resources",
        "//packages/rules_prerender:web_resources",
        "//packages/rules_prerender:web_resources_devserver",
        "//packages/rules_prerender/css:css_group",
        "//packages/rules_prerender/css:css_library",
    ],
)

# Re-export the `declarative_shadow_dom` component at the root of the package
# for easy import by consumers. This isn't needed for content in `//examples/...`
# as they should directly depend on `//packages/rules_prerender/declarative_shadow_dom`.
# However this is needed in the published version so external workspaces can import
# from `rules_prerender/declarative_shadow_dom`.
prerender_component(
    name = "declarative_shadow_dom",
    srcs = ["declarative_shadow_dom.ts"],
    tsconfig = "//:tsconfig",
    source_map = True,
    visibility = ["//visibility:public"],
    deps = ["//packages/rules_prerender/declarative_shadow_dom"],
)

prerender_component_publish_files(
    name = "declarative_shadow_dom_publish_files",
    dep = ":declarative_shadow_dom",
)
