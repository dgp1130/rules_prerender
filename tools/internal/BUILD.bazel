""""Wraps tools so they can be overwritten at runtime via `BUILD.publish`.

All the tools in this directory are required at build time and run time, however
loading the repository at `@npm//rules_prerender` alters pathing and available
files, so the two version cannot be exactly identical. As a result, certain
tools common to both environments need to be defined twice with subtly different
BUILD implementations / pathing. For example, at build time in this repository
we use `//packages/annotation_extractor`, but at build time in a user
repository, we must use `@npm//rules_prerender/bin:annotation-extractor` which
is an equivalent `nodejs_binary()` that is auto-generated by `rules_nodejs` due
to the `bin` directory of `package.json`.

This package serves as a singular location where tools and infrastructure can be
referenced when needed at build time in this repository. A sibling
`BUILD.publish` file defines the same tools as they will be loaded at run time
in the user's repository.
"""

load("@npm//@bazel/postcss:index.bzl", "postcss_plugin")
load("//tools:publish.bzl", "publish_files")

package(default_visibility = ["//visibility:public"])

publish_files(
    name = "publish_files",
    visibility = ["//:__pkg__"],
)

alias(
    name = "renderer",
    actual = "//packages/renderer",
)

alias(
    name = "resource_injector",
    actual = "//packages/resource_injector",
)

alias(
    name = "resource_packager",
    actual = "//packages/resource_packager",
)

alias(
    name = "script_entry_generator",
    actual = "//packages/script_entry_generator",
)

postcss_plugin(
    name = "postcss_import_plugin",
    node_require = "postcss-import",
    deps = ["@npm//postcss-import"],
)
