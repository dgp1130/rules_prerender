""""Overrides tools from `BUILD.bazel` to work at runtime.

All the tools in this directory are required at build time and run time, however
loading the repository at `@npm//rules_prerender` alters pathing and available
files, so the two version cannot be exactly identical. As a result, certain
tools common to both environments need to be defined twice with subtly different
BUILD implementations / pathing. For example, at build time in this repository
we use `//packages/annotation_extractor`, but at build time in a user
repository, we must use `@npm//rules_prerender/bin:annotation-extractor` which
is an equivalent `nodejs_binary()` that is auto-generated by `rules_nodejs` due
to the `bin` directory of `package.json`.

This package serves as a singular location where tools and infrastructure can be
referenced when needed at runtime in a user project. A sibling `BUILD.bazel`
file defines the same tools as they will be loaded at build time in this
repository for local contributors.
"""

load("@npm//@bazel/postcss:index.bzl", "postcss_plugin")

package(default_visibility = ["//visibility:public"])

# Renderer is actually a library that gets built into a custom binary on every
# invocation. This target simply represents the `ts_library()` of that package,
# used as a dep. We can just depend on the whole NPM package instead.
alias(
    name = "renderer",
    actual = "@npm//rules_prerender:rules_prerender__files"
)

# Renderer is actually a library that gets built into a custom binary on every
# invocation. This target simply represents the compiled JavaScript of that
# package, used as an entry point.
alias(
    name = "renderer_js",
    actual = "@npm//rules_prerender/packages/renderer:renderer_js",
)

alias(
    name = "resource_injector",
    actual = "@npm//rules_prerender/bin:resource-injector",
)

alias(
    name = "resource_packager",
    actual = "@npm//rules_prerender/bin:resource-packager",
)

alias(
    name = "script_entry_generator",
    actual = "@npm//rules_prerender/bin:script-entry-generator",
)

alias(
    name = "style_entry_generator",
    actual = "@npm//rules_prerender/bin:style-entry-generator",
)

postcss_plugin(
    name = "postcss_import_plugin",
    node_require = "postcss-import",
    deps = ["@npm//postcss-import"],
)
